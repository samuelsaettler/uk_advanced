Index: src/test/java/ch/course223/advanced/domainmodels/user/unit/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.course223.advanced.domainmodels.user.unit;\n\nimport ch.course223.advanced.domainmodels.authority.Authority;\nimport ch.course223.advanced.domainmodels.authority.AuthorityDTO;\nimport ch.course223.advanced.domainmodels.role.Role;\nimport ch.course223.advanced.domainmodels.role.RoleDTO;\nimport ch.course223.advanced.domainmodels.user.User;\nimport ch.course223.advanced.domainmodels.user.UserDTO;\nimport ch.course223.advanced.domainmodels.user.UserService;\nimport ch.course223.advanced.error.BadRequestException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.test.context.support.WithMockUser;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\nimport java.util.*;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.collection.IsCollectionWithSize.hasSize;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\n@TestPropertySource(\"classpath:application-test.properties\")\npublic class UserController {\n\n    @Autowired\n    private MockMvc mvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Before\n    public void setUp(){\n\n        //Business Objects (used in findById, findAll)\n        Set<Authority> basicUserAuthorities = new HashSet<Authority>();\n        basicUserAuthorities.add(new Authority().setName(\"USER_SEE_OWN\"));\n        basicUserAuthorities.add(new Authority().setName(\"USER_MODIFY_OWN\"));\n\n        Set<Authority> adminUserAuthorities = new HashSet<Authority>();\n        adminUserAuthorities.add(new Authority().setName(\"USER_SEE_OWN\"));\n        adminUserAuthorities.add(new Authority().setName(\"USER_SEE_GLOBAL\"));\n        adminUserAuthorities.add(new Authority().setName(\"USER_CREATE\"));\n        adminUserAuthorities.add(new Authority().setName(\"USER_MODIFY_OWN\"));\n        adminUserAuthorities.add(new Authority().setName(\"USER_MODIFY_GLOBAL\"));\n        adminUserAuthorities.add(new Authority().setName(\"USER_DELETE\"));\n\n        Set<Role> basicUserRoles = new HashSet<Role>();\n        basicUserRoles.add(new Role().setName(\"BASIC_USER\").setAuthorities(basicUserAuthorities));\n\n        Set<Role> adminUserRoles = new HashSet<Role>();\n        adminUserRoles.add(new Role().setName(\"ADMIN_USER\").setAuthorities(adminUserAuthorities));\n\n        User adminUser = new User().setRoles(adminUserRoles).setFirstName(\"john\").setLastName(\"doe\").setEmail(\"john.doe@noseryoung.ch\");\n        User basicUser = new User().setRoles(basicUserRoles).setFirstName(\"jane\").setLastName(\"doe\").setEmail(\"jane.doe@noseryoung.ch\");\n\n        //Mocks\n        given(userService.findById(anyString())).will(invocation -> {\n            if (\"non-existent\".equals(invocation.getArgument(0))) throw new BadRequestException();\n            return (basicUser);\n        });\n\n        given(userService.findAll()).willReturn(Arrays.asList(adminUser, basicUser));\n\n        given(userService.save(any(User.class))).will(invocation -> {\n            if (\"non-existent\".equals(invocation.getArgument(0))) throw new BadRequestException();\n            UUID uuid = UUID.randomUUID();\n            User userDTO = invocation.getArgument(0);\n            return userDTO.setId(uuid.toString());\n        });\n\n        given(userService.updateById(anyString(), any(User.class))).will(invocation -> {\n            if (\"non-existent\".equals(invocation.getArgument(0)) || \"non-existent\".equals(invocation.getArgument(1))) throw new BadRequestException();\n            return ((User) invocation.getArgument(1)).setId(invocation.getArgument(0));\n        });\n\n        given(userService.deleteById(anyString())).will(invocation -> {\n            if (\"non-existent\".equals(invocation.getArgument(0))) throw new BadRequestException();\n            return null;\n        });\n\n    }\n\n    @Test\n    @WithMockUser(roles = {\"BASIC_USER\"})\n    public void findById_requestUserById_returnsUser() throws Exception {\n        UUID uuid = UUID.randomUUID();\n        mvc.perform(\n                MockMvcRequestBuilders.get(\"/users/{id}\", uuid.toString())\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.firstName\").value(\"jane\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.lastName\").value(\"doe\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.email\").value(\"jane.doe@noseryoung.ch\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].name\").value(\"BASIC_USER\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].[0].name\").value(\"USER_SEE_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].[1].name\").value(\"USER_MODIFY_OWN\"));\n\n        ArgumentCaptor<String> userCaptor = ArgumentCaptor.forClass(String.class);\n        verify(userService, times(1)).findById(anyString());\n        assertThat(userCaptor.getValue().equals(uuid.toString()));\n    }\n\n    @Test\n    @WithMockUser\n    public void findAll_requestAllUsers_returnsAllUsers() throws Exception {\n        mvc.perform(\n                MockMvcRequestBuilders.get(\"/users\")\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$\", hasSize(2)))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].email\").value(\"john.doe@noseryoung.ch\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].email\").value(\"jane.doe@noseryoung.ch\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].firstName\").value(\"john\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].firstName\").value(\"jane\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].lastName\").value(\"doe\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].lastName\").value(\"doe\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].roles[0].name\").value(\"ADMIN_USER\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].name\").value(\"BASIC_USER\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].roles[0].[0].name\").value(\"USER_SEE_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].roles[0].[1].name\").value(\"USER_MODIFY_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].[0].name\").value(\"USER_SEE_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].[1].name\").value(\"USER_MODIFY_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].[2].name\").value(\"USER_CREATE\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].[3].name\").value(\"USER_MODIFY_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].[4].name\").value(\"USER_MODIFY_GLOBAL\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$[1].roles[0].[5].name\").value(\"USER_DELETE\"));\n\n        verify(userService, times(1)).findAll();\n    }\n\n    @Test\n    @WithMockUser\n    public void create_deliverUserDTOToCreate_returnCreatedUserDTO() throws Exception {\n        Set<AuthorityDTO> basicUserAuthorityDTOS = new HashSet<AuthorityDTO>();\n        basicUserAuthorityDTOS.add(new AuthorityDTO().setName(\"USER_SEE_OWN\"));\n        basicUserAuthorityDTOS.add(new AuthorityDTO().setName(\"USER_MODIFY_OWN\"));\n\n        Set<RoleDTO> basicUserRoleDTOS = new HashSet<RoleDTO>();\n        basicUserRoleDTOS.add(new RoleDTO().setName(\"BASIC_USER\").setAuthorities(basicUserAuthorityDTOS));\n\n        UserDTO userDTO = new UserDTO().setRoles(basicUserRoleDTOS).setFirstName(\"jane\").setLastName(\"doe\").setEmail(\"jane.doe@noseryoung.ch\");\n\n        String userDTOAsJsonString = new ObjectMapper().writeValueAsString(userDTO);\n\n        mvc.perform(\n                MockMvcRequestBuilders\n                        .post(\"/users\")\n                        .content(userDTOAsJsonString)\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isCreated())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.firstName\").value(\"jane\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.lastName\").value(\"doe\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.email\").value(\"jane.doe@noseryoung.ch\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].name\").value(\"BASIC_USER\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].authorities[0].name\").value(\"USER_MODIFY_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].authorities[1].name\").value(\"USER_SEE_OWN\"));\n\n        ArgumentCaptor<User> userCaptor = ArgumentCaptor.forClass(User.class);\n        verify(userService, times(1)).save(userCaptor.capture());\n        assertThat(userCaptor.getValue().getFirstName().equals(\"jane\"));\n        assertThat(userCaptor.getValue().getLastName().equals(\"doe\"));\n        assertThat(userCaptor.getValue().getEmail().equals(\"jane.doe@noseryoung.ch\"));\n        assertThat(userCaptor.getValue().getRoles().iterator().next().getName().equals(\"USER_SEE_OWN\"));\n        assertThat(userCaptor.getValue().getRoles().iterator().next().getName().equals(\"USER_MODIFY_OWN\"));\n        //check if Roles contain values from above\n    }\n\n    @Test\n    @WithMockUser\n    public void updateUserById_deliverUserDTOToUpdate_returnUpdatedUserDTO() throws Exception {\n        UUID uuid = UUID.randomUUID();\n        Set<AuthorityDTO> basicUserAuthorityDTOS = new HashSet<AuthorityDTO>();\n        basicUserAuthorityDTOS.add(new AuthorityDTO().setName(\"USER_SEE_OWN\"));\n        basicUserAuthorityDTOS.add(new AuthorityDTO().setName(\"USER_MODIFY_OWN\"));\n\n        Set<RoleDTO> basicUserRoleDTOS = new HashSet<RoleDTO>();\n        basicUserRoleDTOS.add(new RoleDTO().setName(\"USER\").setAuthorities(basicUserAuthorityDTOS));\n\n        UserDTO userDTO = new UserDTO().setRoles(basicUserRoleDTOS).setFirstName(\"jane\").setLastName(\"doe\").setEmail(\"jane.doe@noseryoung.ch\");\n\n        String userDTOAsJsonString = new ObjectMapper().writeValueAsString(userDTO);\n\n        mvc.perform(\n                MockMvcRequestBuilders.put(\"/users/{id}\", uuid.toString())\n                        .content(userDTOAsJsonString)\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.firstName\").value(\"john\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.lastName\").value(\"doe\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.email\").value(\"john.doe@noseryoung.ch\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].name\").value(\"USER\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].[0].name\").value(\"USER_SEE_OWN\"))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.roles[0].[1].name\").value(\"USER_MODIFY_OWN\"));\n\n        ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<User> userCaptor = ArgumentCaptor.forClass(User.class);\n        verify(userService, times(1)).updateById(anyString(), any(User.class));\n        assertThat(userCaptor.getValue().getFirstName().equals(\"john\"));\n        assertThat(userCaptor.getValue().getLastName().equals(\"doe\"));\n        assertThat(userCaptor.getValue().getEmail().equals(\"john.doe@noseryoung.ch\"));\n        //check if Roles contain values from above\n        assertThat(stringCaptor.getValue().equals(uuid.toString()));\n\n\n\n    }\n\n    @Test\n    @WithMockUser\n    public void deleteUserById_requestADeletionOfUserById_returnAppropriateState() throws Exception {\n        UUID uuid = UUID.randomUUID();\n\n        mvc.perform(\n                MockMvcRequestBuilders.delete(\"/users/{id}\", uuid.toString())\n                        .accept(MediaType.APPLICATION_JSON))\n                .andExpect(MockMvcResultMatchers.status().isNoContent());\n\n        ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);\n        verify(userService, times(1)).deleteById(anyString());\n        assertThat(stringCaptor.getValue().equals(uuid.toString()));\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ch/course223/advanced/domainmodels/user/unit/UserController.java	(revision 7546f2bc2e6b1bdeb5be5cff4e3aa998c3fe2732)
+++ src/test/java/ch/course223/advanced/domainmodels/user/unit/UserController.java	(date 1586610968192)
@@ -9,6 +9,7 @@
 import ch.course223.advanced.domainmodels.user.UserService;
 import ch.course223.advanced.error.BadRequestException;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -148,11 +149,11 @@
     @Test
     @WithMockUser
     public void create_deliverUserDTOToCreate_returnCreatedUserDTO() throws Exception {
-        Set<AuthorityDTO> basicUserAuthorityDTOS = new HashSet<AuthorityDTO>();
+        ArrayList<AuthorityDTO> basicUserAuthorityDTOS = new ArrayList<>();
         basicUserAuthorityDTOS.add(new AuthorityDTO().setName("USER_SEE_OWN"));
         basicUserAuthorityDTOS.add(new AuthorityDTO().setName("USER_MODIFY_OWN"));
 
-        Set<RoleDTO> basicUserRoleDTOS = new HashSet<RoleDTO>();
+        ArrayList<RoleDTO> basicUserRoleDTOS = new ArrayList<>();
         basicUserRoleDTOS.add(new RoleDTO().setName("BASIC_USER").setAuthorities(basicUserAuthorityDTOS));
 
         UserDTO userDTO = new UserDTO().setRoles(basicUserRoleDTOS).setFirstName("jane").setLastName("doe").setEmail("jane.doe@noseryoung.ch");
@@ -166,21 +167,20 @@
                         .contentType(MediaType.APPLICATION_JSON)
                         .accept(MediaType.APPLICATION_JSON))
                 .andExpect(MockMvcResultMatchers.status().isCreated())
-                .andExpect(MockMvcResultMatchers.jsonPath("$.firstName").value("jane"))
-                .andExpect(MockMvcResultMatchers.jsonPath("$.lastName").value("doe"))
-                .andExpect(MockMvcResultMatchers.jsonPath("$.email").value("jane.doe@noseryoung.ch"))
-                .andExpect(MockMvcResultMatchers.jsonPath("$.roles[0].name").value("BASIC_USER"))
-                .andExpect(MockMvcResultMatchers.jsonPath("$.roles[0].authorities[0].name").value("USER_MODIFY_OWN"))
-                .andExpect(MockMvcResultMatchers.jsonPath("$.roles[0].authorities[1].name").value("USER_SEE_OWN"));
+                .andExpect(MockMvcResultMatchers.jsonPath("$.firstName").value(userDTO.getFirstName()))
+                .andExpect(MockMvcResultMatchers.jsonPath("$.lastName").value(userDTO.getLastName()))
+                .andExpect(MockMvcResultMatchers.jsonPath("$.email").value(userDTO.getEmail()))
+                .andExpect(MockMvcResultMatchers.jsonPath("$.roles[0].name").value(basicUserRoleDTOS.iterator().next().getName()))
+                .andExpect(MockMvcResultMatchers.jsonPath("$.roles[0].authorities[0].name").value(basicUserAuthorityDTOS.get(1).getName()))
+                .andExpect(MockMvcResultMatchers.jsonPath("$.roles[0].authorities[1].name").value(basicUserAuthorityDTOS.get(2).getName()));
 
         ArgumentCaptor<User> userCaptor = ArgumentCaptor.forClass(User.class);
         verify(userService, times(1)).save(userCaptor.capture());
-        assertThat(userCaptor.getValue().getFirstName().equals("jane"));
-        assertThat(userCaptor.getValue().getLastName().equals("doe"));
-        assertThat(userCaptor.getValue().getEmail().equals("jane.doe@noseryoung.ch"));
-        assertThat(userCaptor.getValue().getRoles().iterator().next().getName().equals("USER_SEE_OWN"));
-        assertThat(userCaptor.getValue().getRoles().iterator().next().getName().equals("USER_MODIFY_OWN"));
-        //check if Roles contain values from above
+        Assert.assertEquals(userDTO.getFirstName(), userCaptor.getValue().getFirstName());
+        Assert.assertEquals(userDTO.getLastName(), userCaptor.getValue().getLastName());
+        Assert.assertEquals(userDTO.getEmail(), userCaptor.getValue().getEmail());
+        Assert.assertEquals(basicUserAuthorityDTOS.get(1), userCaptor.getValue().getRoles().get);
+        Assert.assertEquals("USER_SEE_OWN", userCaptor.getValue().getRoles().iterator().next().getAuthorities().iterator().next().getName());
     }
 
     @Test
